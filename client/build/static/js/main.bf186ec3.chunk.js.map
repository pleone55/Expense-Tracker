{"version":3,"sources":["Context/Transaction/TransactionContext.js","Context/Transaction/TransactionReducer.js","Context/types.js","Context/Transaction/TransactionState.js","components/Header.js","components/AddTransaction/AddTransaction.js","components/TransactionList/TransactionList.js","components/IncomeExpense/IncomeExpense.js","components/Balance/Balance.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["TransactionContext","createContext","state","action","type","transaction","payload","loading","filter","_id","error","TransactionState","props","useReducer","TransactionReducer","dispatch","getTransaction","a","axios","get","res","data","deleteTransaction","id","delete","addTransaction","post","response","Provider","value","children","Header","AddTransaction","useState","transInput","setTransaction","amount","setAmount","useContext","onSubmit","event","preventDefault","className","htmlFor","onChange","target","placeholder","TransactionList","transactionContext","useEffect","map","trans","index","key","Math","abs","onClick","IncomeExpense","amounts","transactions","income","item","reduce","acc","toFixed","expense","Balance","total","App","Main","path","from","to","noThrow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bf186ec3.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst TransactionContext = createContext();\r\n\r\nexport default TransactionContext;","import {\r\n    GET_TRANSACTION,\r\n    DELETE_TRANSACTION,\r\n    ADD_TRANSACTION,\r\n    ERROR\r\n} from '../types';\r\n\r\nexport default(state, action) => {\r\n    switch(action.type) {\r\n        case GET_TRANSACTION:\r\n            return {\r\n                ...state,\r\n                transaction: action.payload,\r\n                loading: false,\r\n            }\r\n        case DELETE_TRANSACTION:\r\n            return {\r\n                ...state,\r\n                transaction: state.transaction.filter(transaction => transaction._id !== action.payload)\r\n            }\r\n        case ADD_TRANSACTION:\r\n            return {\r\n                ...state,\r\n                transaction: [...state.transaction, action.payload]\r\n            }\r\n        case ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","export const GET_TRANSACTION = 'GET_TRANSACTIONS';\r\nexport const DELETE_TRANSACTION = 'DELETE_TRANSACTION';\r\nexport const ADD_TRANSACTION = 'ADD_TRANSACTION';\r\nexport const ERROR = 'ERROR';","import React, { useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport TransactionContext from './TransactionContext';\r\nimport TransactionReducer from './TransactionReducer';\r\n\r\nimport {\r\n    GET_TRANSACTION,\r\n    DELETE_TRANSACTION,\r\n    ADD_TRANSACTION,\r\n    ERROR\r\n} from '../types';\r\n\r\nconst TransactionState = props => {\r\n    const initialState = {\r\n        transaction: [],\r\n        loading: true,\r\n        error: null\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(TransactionReducer, initialState);\r\n\r\n    //Get transactions\r\n    const getTransaction = async() => {\r\n\r\n        const res = await axios.get('http://localhost:7000/api/transactions')\r\n\r\n        dispatch({\r\n            type: GET_TRANSACTION,\r\n            payload: res.data\r\n        });\r\n    };\r\n\r\n    const deleteTransaction = async(id) => {\r\n        await axios.delete(`http://localhost:7000/api/transaction/${id}`);\r\n\r\n        dispatch({\r\n            type: DELETE_TRANSACTION,\r\n            payload: id\r\n        });\r\n    };\r\n\r\n    const addTransaction = async(transaction) => {\r\n        try {\r\n            const res = await axios.post('http://localhost:7000/api/new/transaction', transaction);\r\n\r\n            dispatch({\r\n                type: ADD_TRANSACTION,\r\n                payload: res.data\r\n            });\r\n        } catch(err) {\r\n            dispatch({\r\n                type: ERROR,\r\n                payload: err.response.data.error\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TransactionContext.Provider value={{\r\n            transaction: state.transaction,\r\n            error: state.error,\r\n            loading: state.loading,\r\n            getTransaction,\r\n            deleteTransaction,\r\n            addTransaction\r\n        }}>\r\n            {props.children}\r\n        </TransactionContext.Provider>\r\n    )\r\n\r\n};\r\nexport default TransactionState;","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <h2>\r\n        Expense Tracker\r\n    </h2>\r\n)\r\nexport default Header;","import React, { useState, useContext } from 'react';\r\nimport TransactionContext from '../../Context/Transaction/TransactionContext';\r\n\r\nimport './Add.scss';\r\n\r\nconst AddTransaction = () => {\r\n    const [transInput, setTransaction] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n\r\n    const transactionContext = useContext(TransactionContext);\r\n    const { addTransaction } = transactionContext;\r\n\r\n    const onSubmitHandler = event => {\r\n        event.preventDefault();\r\n\r\n        const newTransaction = {\r\n            transInput,\r\n            amount,\r\n        }\r\n        \r\n        addTransaction(newTransaction);\r\n\r\n        setTransaction('');\r\n        setAmount(0);\r\n    };\r\n\r\n    return (\r\n        <h3>\r\n            <form onSubmit={onSubmitHandler}>\r\n                <div className='form-control'>\r\n                    <label htmlFor='transInput'>Transaction Type</label>\r\n                    <input \r\n                        type='text' \r\n                        value={transInput} \r\n                        onChange={event => {setTransaction(event.target.value)}}\r\n                        placeholder=\"Enter Transaction\" \r\n                    />\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label htmlFor='amount'>Amount(+, -)</label>\r\n                    <input \r\n                        type='number' \r\n                        value={amount}\r\n                        onChange={event => {setAmount(event.target.value)}}\r\n                        placeholder=\"Enter amount\"\r\n                    />\r\n                </div>\r\n                <button className='btn'>Add Transaction</button>\r\n            </form>\r\n        </h3>\r\n    )\r\n};\r\nexport default AddTransaction;","import React, { useContext, useEffect } from 'react';\r\nimport TransactionContext from '../../Context/Transaction/TransactionContext';\r\n\r\nimport './TransactionList.scss';\r\n\r\nconst TransactionList = () => {\r\n    const transactionContext = useContext(TransactionContext);\r\n    const { transaction, getTransaction, deleteTransaction } = transactionContext;\r\n\r\n    useEffect(() => {\r\n        getTransaction();\r\n        // eslint-disable-next-line\r\n    }, [])\r\n    \r\n    \r\n    // const sign = trans.amount < 0 ? '-' : '+';\r\n\r\n    return (\r\n        <div>\r\n            <h3>History</h3>\r\n            <ul className='list'>\r\n                {transaction.map((trans, index) => (\r\n                    <li key={index} className={trans.amount < 0 ? 'minus' : 'plus'}>\r\n                        {trans.transInput} <span>{trans.amount < 0 ? '-' : '+'}${Math.abs(trans.amount)}</span>\r\n                        <button onClick={() => {deleteTransaction(trans._id)}} className='delete-btn'>x</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\nexport default TransactionList","import React, { useContext } from 'react';\r\nimport TransactionContext from '../../Context/Transaction/TransactionContext';\r\n\r\nimport './IncomeExpense.scss';\r\n\r\nconst IncomeExpense = () => {\r\n\r\n    const transactionContext = useContext(TransactionContext);\r\n    const { transaction } = transactionContext;\r\n\r\n    const amounts = transaction.map(transactions => transactions.amount);\r\n\r\n    const income = amounts.filter(item => item > 0).reduce((acc, item) => (acc += item), 0)\r\n        .toFixed(2);\r\n    \r\n    const expense = (amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0 * -1)).toFixed(2);\r\n\r\n    return (\r\n        <div className='inc-exp-container'>\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p className='money plus'>${income}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p className='money minus'>${expense}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default IncomeExpense;","import React, { useContext } from 'react';\r\nimport TransactionContext from '../../Context/Transaction/TransactionContext';\r\n\r\nimport './Balance.scss';\r\n\r\nconst Balance = () => {\r\n    const transactionBalance = useContext(TransactionContext);\r\n    const { transaction } = transactionBalance;\r\n    \r\n    const amounts = transaction.map(transactions => transactions.amount);\r\n\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n    return (\r\n        <div>\r\n            <h4>Your Balance</h4>\r\n            <h1>${total}</h1>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Balance;","import React from 'react';\r\nimport Header from '../components/Header';\r\nimport AddTransaction from '../components/AddTransaction/AddTransaction';\r\nimport TransactionList from '../components/TransactionList/TransactionList';\r\nimport IncomeExpense from '../components/IncomeExpense/IncomeExpense';\r\nimport Balance from '../components/Balance/Balance';\r\n\r\n\r\nexport default () => {\r\n    \r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Balance />\r\n            <IncomeExpense/>\r\n            <TransactionList/>\r\n            <hr/>\r\n            <AddTransaction/>\r\n        </div>\r\n    )\r\n};","import React from 'react';\nimport './App.css';\nimport { Router, Redirect } from '@reach/router';\nimport TransactionState from './Context/Transaction/TransactionState';\n\nimport Main from './pages/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TransactionState>\n        <Router>\n          <Main path='/'/>\n          <Redirect from='/' to='/' noThrow />\n        </Router>\n      </TransactionState>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}