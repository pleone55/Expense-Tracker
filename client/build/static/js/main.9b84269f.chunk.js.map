{"version":3,"sources":["components/Header.js","components/AddTransaction/AddTransaction.js","components/TransactionList/TransactionList.js","components/IncomeExpense/IncomeExpense.js","components/Balance/Balance.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","AddTransaction","useState","transaction","setTransaction","amount","setAmount","errors","setErrors","onSubmit","event","preventDefault","axios","post","then","response","console","log","navigate","catch","err","errResponse","data","errorArr","Object","keys","key","push","message","className","map","i","htmlFor","type","value","onChange","target","placeholder","onClick","TransactionList","trans","removeFromDom","index","Math","abs","transId","_id","delete","IncomeExpense","amounts","income","filter","item","reduce","acc","toFixed","expense","Balance","total","setTrans","loaded","setLoaded","useEffect","get","App","Main","path","from","to","noThrow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.9b84269f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <h2>\r\n        Expense Tracker\r\n    </h2>\r\n)\r\nexport default Header;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nimport './Add.scss';\r\n\r\nconst AddTransaction = () => {\r\n    const [transaction, setTransaction] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    const onSubmitHandler = event => {\r\n        event.preventDefault();\r\n\r\n        axios.post('http://localhost:7000/api/new/transaction', {\r\n            transaction,\r\n            amount\r\n        })\r\n            .then(response => console.log(response))\r\n            .then(() => navigate('/'))\r\n            .catch(err => {\r\n                const errResponse = err.response.data.errors;\r\n                const errorArr = [];\r\n                for(const key of Object.keys(errResponse)){\r\n                    errorArr.push(errResponse[key].message)\r\n                }\r\n\r\n                setErrors(errorArr);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <h3>\r\n            <form onSubmit={onSubmitHandler}>\r\n                <div className='errors'>{errors.map((err, i) => <p key={i}>{err}</p>)}</div>\r\n                <div className='form-control'>\r\n                    <label htmlFor='transaction'>Transaction Type</label>\r\n                    <input \r\n                        type='text' \r\n                        value={transaction} \r\n                        onChange={event => {setTransaction(event.target.value)}}\r\n                        placeholder=\"Enter Transaction\" \r\n                    />\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label htmlFor='amount'>Amount(+, -)</label>\r\n                    <input \r\n                        type='number' \r\n                        value={amount}\r\n                        onChange={event => {setAmount(event.target.value)}}\r\n                        placeholder=\"Enter amount\"\r\n                    />\r\n                </div>\r\n                <button onClick={() => navigate('/')} className='btn'>Add Transaction</button>\r\n            </form>\r\n        </h3>\r\n    )\r\n};\r\nexport default AddTransaction;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport './TransactionList.scss';\r\n\r\nconst TransactionList = ({ trans, removeFromDom }) => {\r\n    \r\n    const handleDelete = transId => {\r\n        axios.delete('http://localhost:7000/api/transaction/' + transId)\r\n            .then(response => {\r\n                removeFromDom(transId)\r\n            })\r\n    }\r\n    \r\n    // const sign = trans.amount < 0 ? '-' : '+';\r\n\r\n    return (\r\n        <div>\r\n            <h3>History</h3>\r\n            <ul className='list'>\r\n                {trans.map((trans, index) => (\r\n                    <li key={index} className={trans.amount < 0 ? 'minus' : 'plus'}>\r\n                        {trans.transaction} <span>{trans.amount < 0 ? '-' : '+'}${Math.abs(trans.amount)}</span>\r\n                        <button onClick={() => {handleDelete(trans._id)}} className='delete-btn'>x</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\nexport default TransactionList","import React from 'react';\r\n\r\nimport './IncomeExpense.scss';\r\n\r\nconst IncomeExpense = ({ trans, amount }) => {\r\n\r\n    const amounts = trans.map(transaction => transaction.amount);\r\n\r\n    const income = amounts.filter(item => item > 0).reduce((acc, item) => (acc += item), 0)\r\n        .toFixed(2);\r\n    \r\n    const expense = (amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0 * -1)).toFixed(2);\r\n\r\n    return (\r\n        <div className='inc-exp-container'>\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p className='money plus'>${income}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p className='money minus'>${expense}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default IncomeExpense;","import React from 'react';\r\n\r\nimport './Balance.scss';\r\n\r\nconst Balance = ({ trans }) => {\r\n    const amounts = trans.map(transaction => transaction.amount);\r\n\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n    return (\r\n        <div>\r\n            <h4>Your Balance</h4>\r\n            <h1>${total}</h1>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Balance;","import React, {useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport AddTransaction from '../components/AddTransaction/AddTransaction';\r\nimport TransactionList from '../components/TransactionList/TransactionList';\r\nimport IncomeExpense from '../components/IncomeExpense/IncomeExpense';\r\nimport Balance from '../components/Balance/Balance';\r\n\r\nimport axios from 'axios';\r\n\r\nexport default () => {\r\n    const [trans, setTrans] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:7000/api/transactions')\r\n            .then(response => {\r\n                setTrans(response.data);\r\n                setLoaded(true);\r\n            })\r\n    }, [])\r\n\r\n    const removeFromDom = transId => {\r\n        setTrans(trans.filter(trans => trans._id !== transId));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Balance trans={trans}/>\r\n            <IncomeExpense trans={trans}/>\r\n            {loaded && <TransactionList trans={trans} removeFromDom={removeFromDom}/>}\r\n            <hr/>\r\n            <AddTransaction />\r\n        </div>\r\n    )\r\n};","import React from 'react';\nimport './App.css';\nimport { Router, Redirect } from '@reach/router';\n\nimport Main from './pages/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Main path='/'/>\n        <Redirect from='/' to='/' noThrow />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}